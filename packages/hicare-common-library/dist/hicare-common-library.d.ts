// Generated by dts-bundle-generator v9.5.1

import dayjs from 'dayjs';
import { Duration, DurationUnitType, DurationUnitsObjectType } from 'dayjs/plugin/duration';
import { debounce as RemedaDebounce, isObjectType, once as RemedaOnce } from 'remeda';
import { IsNumericLiteral } from 'type-fest';

export type IterableContainer<T = unknown> = ReadonlyArray<T> | readonly [
];
export type Mapped<T extends IterableContainer, K> = {
	-readonly [P in keyof T]: K;
};
export type FormatArgs = (string | number | boolean | null | undefined)[];
export interface PersonName {
	lastName?: string;
	firstName?: string;
	middleName?: string;
}
export interface CodeItem {
	codeId: string;
	codeParentId: string | null;
	codeText?: string | null;
	[key: string]: any;
}
export interface TreeNode extends CodeItem {
	children: TreeNode[];
}
export type GroupByKey = string | number | symbol;
export declare const enum Code {
	CLAIM_STATUS = "ca6e8e56-0d72-11ed-a226-06a78b1c250a",
	CONDITION = "056d5ca9-7734-11ec-a226-06a78b1c250a",
	CONSENT = "43798f96-774d-11ec-a226-06a78b1c250a",
	ELIGIBILITY_REVIEW = "13bb3215-7735-11ec-a226-06a78b1c250a",
	ENROLLMENT_STATUS = "1976c6a2-7735-11ec-a226-06a78b1c250a",
	GENDER = "823f4955-7733-11ec-a226-06a78b1c250a",
	MEASURE_TYPE = "1cb40907-7735-11ec-a226-06a78b1c250a",
	MEASURE_UNIT = "10eb65cb-c62f-4cb7-afe0-a8539cb5eaef",
	MEDICARE_ADVANTAGE = "f09c785f-8ec3-11ec-a226-06a78b1c250a",
	PHONE_TYPE = "e744358e-7733-11ec-a226-06a78b1c250a",
	PRIMARY_LANGUAGE = "b9191622-7733-11ec-a226-06a78b1c250a",
	QHR_ROLE = "ee875d4a-7734-11ec-a226-06a78b1c250a",
	RELATIONSHIP = "5f11a2c5-dafc-11ec-a226-06a78b1c250a",
	RPM_STATUS = "4979d075-7734-11ec-a226-06a78b1c250a",
	SIGNATURE = "16d67391-7735-11ec-a226-06a78b1c250a",
	SUFFIX = "62046605-7732-11ec-a226-06a78b1c250a",
	ELIGIBILITY_IN_REVIEW = "3bb0ef1d-7735-11ec-a226-06a78b1c250a",
	ELIGIBILITY_VERIFIED = "3bb2f31b-7735-11ec-a226-06a78b1c250a",
	ELIGIBILITY_FAILED = "3bb54028-7735-11ec-a226-06a78b1c250a",
	RPM_STATUS_COMPLETE = "dc77d674-ebaf-11ec-befa-02c8f3e7d8ef",
	RPM_STATUS_CANCELLED = "7bdb3039-7734-11ec-a226-06a78b1c250a",
	RPM_STATUS_ACTIVE = "7bd982c8-7734-11ec-a226-06a78b1c250a",
	RPM_STATUS_READY_TO_ACTIVE = "b0fa0f6e-8258-11ed-b2c5-020c1cf7a0c9",
	RPM_STATUS_PENDING_DEVICES = "7bd7d122-7734-11ec-a226-06a78b1c250a",
	ENROLLMENT_ACTIVE = "7155877d-7735-11ec-a226-06a78b1c250a",
	ENROLLMENT_COMPLETED = "715749be-7735-11ec-a226-06a78b1c250a",
	ENROLLMENT_SUSPENDED = "71590146-7735-11ec-a226-06a78b1c250a",
	GENDER_MALE = "af345a3c-7733-11ec-a226-06a78b1c250a",
	GEDNER_FEMALE = "af360f6f-7733-11ec-a226-06a78b1c250a",
	GENDER_X = "af37f483-7733-11ec-a226-06a78b1c250a",
	SIGNATURE_VIEWED = "4cb06388-7735-11ec-a226-06a78b1c250a",
	SIGNATURE_SIGNED = "6f20fc68-7735-11ec-a226-06a78b1c250a",
	SIGNATURE_UPLOAD = "b7c9e30b-9211-11ed-a919-06a78b1c250a",
	QHP_ROLE_FACILITY_CT = "e2cabdad-aad2-11ee-a0a9-062bbfc7eb11",
	QHP_ROLE_HICARE_NP = "a465cb75-28f1-11ee-9a36-0ab35bc0c726",
	QHP_ROLE_HICARE_CT = "0754b33c-ef84-11ed-b2c5-020c1cf7a0c9",
	QHP_ROLE_CLINIC_CT = "fb143db4-0988-11ee-a919-06a78b1c250a",
	QHP_ROLE_HICARE_RN = "11094071-7735-11ec-a226-06a78b1c250a",
	DELIVERY_STATUS_DELIVERED = "d42824be-7136-11ed-a919-06a78b1c250a",
	DELIVERY_STATUS_PACKAGE_READY = "953c2436-7734-11ec-a226-06a78b1c250a",
	DELIVERY_STATUS_PENDING_DEVICE = "953a541e-7734-11ec-a226-06a78b1c250a",
	USER_TYPE_CARETEAM_PORTAL_MEMBER = "e383d28c-dd19-11ee-858c-06fd0ed1919b",
	USER_TYPE_HICARE_CARE_TEAM = "8ca25293-cc3a-11ed-a919-06a78b1c250a",
	USER_TYPE_SERVICE = "6118206f-d4e2-11ec-a226-06a78b1c250a",
	USER_TYPE_PATIENT = "d22ae297-a8ca-11ec-a226-06a78b1c250a",
	USER_TYPE_STAFF = "136060fc-8adb-11ec-a226-06a78b1c250a",
	USER_TYPE_CARETEAM_MEMBER = "a1303ee9-7fd5-11ec-a226-06a78b1c250a",
	USER_TYPE_PROVIDER = "a124d864-7fd5-11ec-a226-06a78b1c250a",
	USER_TYPE_ADMIN = "a11a8f3a-7fd5-11ec-a226-06a78b1c250a",
	CONSENT_PRINT = "d38180de-9080-11ed-a919-06a78b1c250a",
	CONSENT_SIGN = "d9c70a7f-6d53-11ee-a9cb-02685550b348",
	CONSENT_IN_PERSON = "e6bba2a0-774d-11ec-a226-06a78b1c250a",
	CONSENT_PHYSICIAN = "e6b9b4e3-774d-11ec-a226-06a78b1c250a",
	MEASURE_TYPE_WT = "0f1f5415-7759-11ec-a226-06a78b1c250a",
	MEASURE_TYPE_TEMP = "0f21103e-7759-11ec-a226-06a78b1c250a",
	MEASURE_TYPE_SPO2 = "0f22ceff-7759-11ec-a226-06a78b1c250a",
	MEASURE_TYPE_BG = "0f1dbacf-7759-11ec-a226-06a78b1c250a",
	MEASURE_TYPE_BP = "0f1bb6d5-7759-11ec-a226-06a78b1c250a",
	MEASURE_BP_BP = "ad908305-c418-4cde-a924-1885d504f8e7",
	MEASURE_BP_PULSE = "02ef56ad-8ee3-11ec-a226-06a78b1c250a",
	MEASURE_BP_BP_SYS = "02edc507-8ee3-11ec-a226-06a78b1c250a",
	MEASURE_BP_BP_DIA = "02ea4071-8ee3-11ec-a226-06a78b1c250a",
	MEASURE_SPO2_SPO2 = "02f0f91f-8ee3-11ec-a226-06a78b1c250a",
	MEASURE_SPO2_PULSE = "02f2c407-8ee3-11ec-a226-06a78b1c250a",
	MEASURE_BG_BG = "e8587f25-a436-11ec-a226-06a78b1c250a",
	MEASURE_TEMP_TEMP = "febc6fb5-3abe-4f1e-af83-820252c97483",
	MONITORING_TYPE_ALERT = "2a8dc406-ac1a-11ec-a226-06a78b1c250a",
	MONITORING_TYPE_NOTIFICATION = "2a8f7dfd-ac1a-11ec-a226-06a78b1c250a",
	MONITORING_TYPE_MEASURE_NOTE = "96f01500-c538-11ec-a226-06a78b1c250a",
	MONITORING_TYPE_NOTIFICATION_OVERDUE = "8fc9c134-beb3-11ec-a226-06a78b1c250a",
	MONITORING_TYPE_NOTIFICATION_CANCEL_REQ_CALL = "8fc7bf76-beb3-11ec-a226-06a78b1c250a",
	MONITORING_TYPE_NOTIFICATION_REQ_CALL = "8fc3c625-beb3-11ec-a226-06a78b1c250a",
	PRIMARY_LANGUAGE_KOREAN = "e481e75f-7733-11ec-a226-06a78b1c250a",
	PRIMARY_LANGUAGE_SPANISH = "e4804da9-7733-11ec-a226-06a78b1c250a",
	PRIMARY_LANGUAGE_ENGLISH = "e47e56de-7733-11ec-a226-06a78b1c250a"
}
export declare const code: {
	COMMON_STRUCTURE: {
		CLAIM_STATUS: Code;
		CONDITION: Code;
		CONSENT: Code;
		ELIGIBILITY_REVIEW: Code;
		ENROLLMENT_STATUS: Code;
		GENDER: Code;
		MEASURE_TYPE: Code;
		MEASURE_UNIT: Code;
		MEDICARE_ADVANTAGE: Code;
		PHONE_TYPE: Code;
		PRIMARY_LANGUAGE: Code;
		QHR_ROLE: Code;
		RELATIONSHIP: Code;
		RPM_STATUS: Code;
		SIGNATURE: Code;
		SUFFIX: Code;
	};
	ELIGIBILITY_TYPE: {
		IN_REVIEW: Code;
		VERIFIED: Code;
		FAILED: Code;
	};
	RPM_STATUS: {
		COMPLETE: Code;
		CANCELLED: Code;
		ACTIVE: Code;
		READY_TO_ACTIVE: Code;
		PENDING_DEVICES: Code;
	};
	ENROLLMENT_STATUS: {
		ACTIVE: Code;
		COMPLETED: Code;
		SUSPENDED: Code;
	};
	GENDER_TYPE: {
		X: Code;
		MALE: Code;
		FEMALE: Code;
	};
	SIGNATURE_TYPE: {
		VIEWED: Code;
		SIGNED: Code;
		UPLOAD: Code;
	};
	QHP_ROLE: {
		FACILITY_CT: Code;
		HICARE_NP: Code;
		HICARE_CT: Code;
		CLINIC_CT: Code;
		HICARE_RN: Code;
	};
	DELIVERY_STATUS: {
		DELIVERED: Code;
		PACKAGE_READY: Code;
		PENDING_DEVICE: Code;
	};
	USER_TYPE: {
		CARETEAM_PORTAL_MEMBER: Code;
		HICARE_CARE_TEAM: Code;
		SERVICE: Code;
		PATIENT: Code;
		STAFF: Code;
		CARETEAM_MEMBER: Code;
		PROVIDER: Code;
		ADMIN: Code;
	};
	CONSENT: {
		PRINT: Code;
		SIGN: Code;
		IN_PERSON: Code;
		PHYSICIAN: Code;
	};
	MEASURE_TYPE: {
		WT: Code;
		TEMP: Code;
		SPO2: Code;
		BG: Code;
		BP: Code;
		BP_IN_BP: Code;
		BP_IN_PULSE: Code;
		BP_IN_BP_IN_SYS: Code;
		BP_IN_BP_IN_DIA: Code;
		SPO2_IN_SPO2: Code;
		SPO2_IN_PULSE: Code;
		BG_IN_BG: Code;
		TEMP_IN_TEMP: Code;
	};
	MONITORING_TYPE: {
		ALERT: Code;
		NOTIFICATION: Code;
		MEASURE_NOTE: Code;
		NOTIFICATION_OVERDUE: Code;
		NOTIFICATION_CANCEL_REQ_CALL: Code;
		NOTIFICATION_REQ_CALL: Code;
	};
	PRIMARY_LANGUAGE: {
		KOREAN: Code;
		SPANISH: Code;
		ENGLISH: Code;
	};
};
export declare const enum CodeValue {
	"ca6e8e56-0d72-11ed-a226-06a78b1c250a" = "CLAIM_STATUS ",
	"056d5ca9-7734-11ec-a226-06a78b1c250a" = "CONDITION ",
	"43798f96-774d-11ec-a226-06a78b1c250a" = "CONSENT ",
	"13bb3215-7735-11ec-a226-06a78b1c250a" = "ELIGIBILITY_REVIEW ",
	"1976c6a2-7735-11ec-a226-06a78b1c250a" = "ENROLLMENT_STATUS ",
	"823f4955-7733-11ec-a226-06a78b1c250a" = "GENDER ",
	"1cb40907-7735-11ec-a226-06a78b1c250a" = "MEASURE_TYPE ",
	"10eb65cb-c62f-4cb7-afe0-a8539cb5eaef" = "MEASURE_UNIT ",
	"f09c785f-8ec3-11ec-a226-06a78b1c250a" = "MEDICARE_ADVANTAGE ",
	"e744358e-7733-11ec-a226-06a78b1c250a" = "PHONE_TYPE ",
	"b9191622-7733-11ec-a226-06a78b1c250a" = "PRIMARY_LANGUAGE ",
	"ee875d4a-7734-11ec-a226-06a78b1c250a" = "QHR_ROLE ",
	"5f11a2c5-dafc-11ec-a226-06a78b1c250a" = "RELATIONSHIP ",
	"4979d075-7734-11ec-a226-06a78b1c250a" = "RPM_STATUS ",
	"16d67391-7735-11ec-a226-06a78b1c250a" = "SIGNATURE ",
	"62046605-7732-11ec-a226-06a78b1c250a" = "SUFFIX ",
	"3bb0ef1d-7735-11ec-a226-06a78b1c250a" = "ELIGIBILITY_IN_REVIEW ",
	"3bb2f31b-7735-11ec-a226-06a78b1c250a" = "ELIGIBILITY_VERIFIED ",
	"3bb54028-7735-11ec-a226-06a78b1c250a" = "ELIGIBILITY_FAILED ",
	"dc77d674-ebaf-11ec-befa-02c8f3e7d8ef" = "RPM_STATUS_COMPLETE ",
	"7bdb3039-7734-11ec-a226-06a78b1c250a" = "RPM_STATUS_CANCELLED ",
	"7bd982c8-7734-11ec-a226-06a78b1c250a" = "RPM_STATUS_ACTIVE ",
	"b0fa0f6e-8258-11ed-b2c5-020c1cf7a0c9" = "RPM_STATUS_READY_TO_ACTIVE ",
	"7bd7d122-7734-11ec-a226-06a78b1c250a" = "RPM_STATUS_PENDING_DEVICES ",
	"7155877d-7735-11ec-a226-06a78b1c250a" = "ENROLLMENT_ACTIVE ",
	"715749be-7735-11ec-a226-06a78b1c250a" = "ENROLLMENT_COMPLETED ",
	"71590146-7735-11ec-a226-06a78b1c250a" = "ENROLLMENT_SUSPENDED ",
	"af345a3c-7733-11ec-a226-06a78b1c250a" = "GENDER_MALE ",
	"af360f6f-7733-11ec-a226-06a78b1c250a" = "GEDNER_FEMALE ",
	"af37f483-7733-11ec-a226-06a78b1c250a" = "GENDER_X ",
	"4cb06388-7735-11ec-a226-06a78b1c250a" = "SIGNATURE_VIEWED ",
	"6f20fc68-7735-11ec-a226-06a78b1c250a" = "SIGNATURE_SIGNED ",
	"b7c9e30b-9211-11ed-a919-06a78b1c250a" = "SIGNATURE_UPLOAD ",
	"e2cabdad-aad2-11ee-a0a9-062bbfc7eb11" = "QHP_ROLE_FACILITY_CT ",
	"a465cb75-28f1-11ee-9a36-0ab35bc0c726" = "QHP_ROLE_HICARE_NP ",
	"0754b33c-ef84-11ed-b2c5-020c1cf7a0c9" = "QHP_ROLE_HICARE_CT ",
	"fb143db4-0988-11ee-a919-06a78b1c250a" = "QHP_ROLE_CLINIC_CT ",
	"11094071-7735-11ec-a226-06a78b1c250a" = "QHP_ROLE_HICARE_RN ",
	"d42824be-7136-11ed-a919-06a78b1c250a" = "DELIVERY_STATUS_DELIVERED ",
	"953c2436-7734-11ec-a226-06a78b1c250a" = "DELIVERY_STATUS_PACKAGE_READY ",
	"953a541e-7734-11ec-a226-06a78b1c250a" = "DELIVERY_STATUS_PENDING_DEVICE ",
	"e383d28c-dd19-11ee-858c-06fd0ed1919b" = "USER_TYPE_CARETEAM_PORTAL_MEMBER ",
	"8ca25293-cc3a-11ed-a919-06a78b1c250a" = "USER_TYPE_HICARE_CARE_TEAM ",
	"6118206f-d4e2-11ec-a226-06a78b1c250a" = "USER_TYPE_SERVICE ",
	"d22ae297-a8ca-11ec-a226-06a78b1c250a" = "USER_TYPE_PATIENT ",
	"136060fc-8adb-11ec-a226-06a78b1c250a" = "USER_TYPE_STAFF ",
	"a1303ee9-7fd5-11ec-a226-06a78b1c250a" = "USER_TYPE_CARETEAM_MEMBER ",
	"a124d864-7fd5-11ec-a226-06a78b1c250a" = "USER_TYPE_PROVIDER ",
	"a11a8f3a-7fd5-11ec-a226-06a78b1c250a" = "USER_TYPE_ADMIN ",
	"d38180de-9080-11ed-a919-06a78b1c250a" = "CONSENT_PRINT ",
	"d9c70a7f-6d53-11ee-a9cb-02685550b348" = "CONSENT_SIGN ",
	"e6bba2a0-774d-11ec-a226-06a78b1c250a" = "CONSENT_IN_PERSON ",
	"e6b9b4e3-774d-11ec-a226-06a78b1c250a" = "CONSENT_PHYSICIAN ",
	"0f1f5415-7759-11ec-a226-06a78b1c250a" = "MEASURE_TYPE_WT ",
	"0f21103e-7759-11ec-a226-06a78b1c250a" = "MEASURE_TYPE_TEMP ",
	"0f22ceff-7759-11ec-a226-06a78b1c250a" = "MEASURE_TYPE_SPO2 ",
	"0f1dbacf-7759-11ec-a226-06a78b1c250a" = "MEASURE_TYPE_BG ",
	"0f1bb6d5-7759-11ec-a226-06a78b1c250a" = "MEASURE_TYPE_BP ",
	"ad908305-c418-4cde-a924-1885d504f8e7" = "MEASURE_BP_BP ",
	"02ef56ad-8ee3-11ec-a226-06a78b1c250a" = "MEASURE_BP_PULSE ",
	"02edc507-8ee3-11ec-a226-06a78b1c250a" = "MEASURE_BP_BP_SYS ",
	"02ea4071-8ee3-11ec-a226-06a78b1c250a" = "MEASURE_BP_BP_DIA ",
	"02f0f91f-8ee3-11ec-a226-06a78b1c250a" = "MEASURE_SPO2_SPO2 ",
	"02f2c407-8ee3-11ec-a226-06a78b1c250a" = "MEASURE_SPO2_PULSE ",
	"e8587f25-a436-11ec-a226-06a78b1c250a" = "MEASURE_BG_BG ",
	"febc6fb5-3abe-4f1e-af83-820252c97483" = "MEASURE_TEMP_TEMP ",
	"2a8dc406-ac1a-11ec-a226-06a78b1c250a" = "MONITORING_TYPE_ALERT ",
	"2a8f7dfd-ac1a-11ec-a226-06a78b1c250a" = "MONITORING_TYPE_NOTIFICATION ",
	"96f01500-c538-11ec-a226-06a78b1c250a" = "MONITORING_TYPE_MEASURE_NOTE ",
	"8fc9c134-beb3-11ec-a226-06a78b1c250a" = "MONITORING_TYPE_NOTIFICATION_OVERDUE ",
	"8fc7bf76-beb3-11ec-a226-06a78b1c250a" = "MONITORING_TYPE_NOTIFICATION_CANCEL_REQ_CALL ",
	"8fc3c625-beb3-11ec-a226-06a78b1c250a" = "MONITORING_TYPE_NOTIFICATION_REQ_CALL ",
	"e481e75f-7733-11ec-a226-06a78b1c250a" = "PRIMARY_LANGUAGE_KOREAN ",
	"e4804da9-7733-11ec-a226-06a78b1c250a" = "PRIMARY_LANGUAGE_SPANISH ",
	"e47e56de-7733-11ec-a226-06a78b1c250a" = "PRIMARY_LANGUAGE_ENGLISH "
}
export declare const codeValue: {
	"3bb0ef1d-7735-11ec-a226-06a78b1c250a": string;
	"3bb2f31b-7735-11ec-a226-06a78b1c250a": string;
	"3bb54028-7735-11ec-a226-06a78b1c250a": string;
	"dc77d674-ebaf-11ec-befa-02c8f3e7d8ef": string;
	"7bdb3039-7734-11ec-a226-06a78b1c250a": string;
	"7bd982c8-7734-11ec-a226-06a78b1c250a": string;
	"b0fa0f6e-8258-11ed-b2c5-020c1cf7a0c9": string;
	"7bd7d122-7734-11ec-a226-06a78b1c250a": string;
	"7155877d-7735-11ec-a226-06a78b1c250a": string;
	"715749be-7735-11ec-a226-06a78b1c250a": string;
	"71590146-7735-11ec-a226-06a78b1c250a": string;
	"af345a3c-7733-11ec-a226-06a78b1c250a": string;
	"af360f6f-7733-11ec-a226-06a78b1c250a": string;
	"af37f483-7733-11ec-a226-06a78b1c250a": string;
	"4cb06388-7735-11ec-a226-06a78b1c250a": string;
	"6f20fc68-7735-11ec-a226-06a78b1c250a": string;
	"b7c9e30b-9211-11ed-a919-06a78b1c250a": string;
	"e2cabdad-aad2-11ee-a0a9-062bbfc7eb11": string;
	"a465cb75-28f1-11ee-9a36-0ab35bc0c726": string;
	"0754b33c-ef84-11ed-b2c5-020c1cf7a0c9": string;
	"fb143db4-0988-11ee-a919-06a78b1c250a": string;
	"11094071-7735-11ec-a226-06a78b1c250a": string;
	"d42824be-7136-11ed-a919-06a78b1c250a": string;
	"953c2436-7734-11ec-a226-06a78b1c250a": string;
	"953a541e-7734-11ec-a226-06a78b1c250a": string;
	"e383d28c-dd19-11ee-858c-06fd0ed1919b": string;
	"8ca25293-cc3a-11ed-a919-06a78b1c250a": string;
	"6118206f-d4e2-11ec-a226-06a78b1c250a": string;
	"d22ae297-a8ca-11ec-a226-06a78b1c250a": string;
	"136060fc-8adb-11ec-a226-06a78b1c250a": string;
	"a1303ee9-7fd5-11ec-a226-06a78b1c250a": string;
	"a124d864-7fd5-11ec-a226-06a78b1c250a": string;
	"a11a8f3a-7fd5-11ec-a226-06a78b1c250a": string;
	"d38180de-9080-11ed-a919-06a78b1c250a": string;
	"d9c70a7f-6d53-11ee-a9cb-02685550b348": string;
	"e6bba2a0-774d-11ec-a226-06a78b1c250a": string;
	"e6b9b4e3-774d-11ec-a226-06a78b1c250a": string;
	"0f1f5415-7759-11ec-a226-06a78b1c250a": string;
	"0f21103e-7759-11ec-a226-06a78b1c250a": string;
	"0f22ceff-7759-11ec-a226-06a78b1c250a": string;
	"0f1dbacf-7759-11ec-a226-06a78b1c250a": string;
	"0f1bb6d5-7759-11ec-a226-06a78b1c250a": string;
	"ad908305-c418-4cde-a924-1885d504f8e7": string;
	"02ef56ad-8ee3-11ec-a226-06a78b1c250a": string;
	"02edc507-8ee3-11ec-a226-06a78b1c250a": string;
	"02ea4071-8ee3-11ec-a226-06a78b1c250a": string;
	"02f0f91f-8ee3-11ec-a226-06a78b1c250a": string;
	"02f2c407-8ee3-11ec-a226-06a78b1c250a": string;
	"e8587f25-a436-11ec-a226-06a78b1c250a": string;
	"febc6fb5-3abe-4f1e-af83-820252c97483": string;
	"2a8dc406-ac1a-11ec-a226-06a78b1c250a": string;
	"2a8f7dfd-ac1a-11ec-a226-06a78b1c250a": string;
	"96f01500-c538-11ec-a226-06a78b1c250a": string;
	"8fc9c134-beb3-11ec-a226-06a78b1c250a": string;
	"8fc7bf76-beb3-11ec-a226-06a78b1c250a": string;
	"8fc3c625-beb3-11ec-a226-06a78b1c250a": string;
	"e481e75f-7733-11ec-a226-06a78b1c250a": string;
	"e4804da9-7733-11ec-a226-06a78b1c250a": string;
	"e47e56de-7733-11ec-a226-06a78b1c250a": string;
};
export declare const enum ConsentCodeText {
	PHYSICIANATTESTATION = "Physician or physician\u2019s staff member attests to receiving patient consent",
	INPERSON = "In person (patient is present or will sign at next appointment)",
	VIAAPP = "Sign electronically : Via App",
	PRINT = "Print out and physically signed by patient, and upload"
}
export declare const DateSortType: {
	text: string;
	value: string;
}[];
export declare const enum TimeUnit {
	SECOND = "second",
	MINUTE = "minute",
	HOUR = "hour",
	DAY = "day",
	DAYS = "days",
	MONTH = "month",
	MONTHS = "months",
	YEAR = "year"
}
export declare const enum DateFormatUnit {
	MMDDYYYY = "MM/DD/YYYY",
	MMddyyyy = "MM/dd/yyyy",
	YYYYMMDD = "YYYY-MM-DD"
}
export declare const enum PageRouteUnit {
	CLAIM = "claim",
	CANDIDATE = "candidate",
	REPORT_MONTHLY = "reportMonthly",
	REPORT_DOCUMENTS = "reportDocuments",
	ENROLLMENT = "enrollment",
	PATIENT = "patient"
}
export declare const enum PageRefererUnit {
	PATIENT = "/patient",
	PATIENT_ADD = "/patient/add",
	CANDIDATE = "/candidate",
	CANDIDATE_CREATE = "/candidate/create",
	ENROLLMENT = "/enrollment",
	ENROLLMENT_MONITORING = "/enrollment/monitoring",
	CLAIM = "/claim",
	REPORT_MONTHLY = "/report/monthly",
	REPORT_DOCUMENTS = "/report/documents",
	MEMBER_MANAGER = "/memberMng",
	MEASURE_RANGE_MANAGER = "/measureRangeMng"
}
export declare const enum ServiceTypeUnit {
	RPM = "RPM",
	CCM = "CCM",
	RPMCCM = "RPM/CCM"
}
export declare const enum CcmStatusUnit {
	PENDING_REVIEW = "Pending Review",
	PENDING_LOCK = "Pending Lock",
	COMPLETE = "Complete"
}
export declare const enum HttpMethodUnit {
	GET = "GET",
	POST = "POST",
	PUT = "PUT",
	DELETE = "DELETE"
}
export declare const enum SignatureUnit {
	VIEWED = "Viewed",
	SIGNED = "Signed",
	UPLOAD = "Upload"
}
/**
 * 모든 함수가 주어진 데이터에 대해 true인지 확인하는 함수
 *
 * @param data - 확인할 변수
 * @param fns - 확인할 함수
 * @signature
 *  allPass(data, fns)
 * @example
 *  const isDivisibleBy3 = (x: number) => x % 3 === 0
 *  const isDivisibleBy4 = (x: number) => x % 4 === 0
 *  const fns = [isDivisibleBy3, isDivisibleBy4]
 *  allPass(12, fns) // => true
 *  allPass(8, fns) // => false
 * @dataFirst
 * @category Array
 */
export declare function allPass<T>(data: T, fns: Array<(data: T) => boolean>): boolean;
/**
 * 주어진 데이터가 배열인지 확인하는 함수
 *
 * @param data - 확인할 데이터
 * @returns 데이터가 배열이면 true, 배열이 아니면 false 반환
 * @signature
 *  isArray<T>(data: T | T[]): data is T[]
 * @example
 *  isArray([1, 2, 3]) // => true
 *  isArray([]) // => true
 *
 *  isArray('string') // => false
 *  isArray({ key: 'value' }) // => false
 *  isArray(null) // => false
 *  isArray(undefined) // => false
 *  ...
 * @category Guard
 */
export declare function isArray<T>(data: T): boolean;
/**
 * 전달된 데이터가 boolean인지 확인하는 함수
 *
 * @param data - 확인할 데이터
 * @returns 데이터가 boolean이면 true, boolean이 아니면 false 반환
 * @signature
 *  isBoolean(data)
 * @example
 *  isBoolean(true) //=> true
 *  isBoolean(false) //=> true
 *  isBoolean('somethingElse') //=> false
 *  isBoolean(123) //=> false
 *  ...
 * @category Guard
 */
export declare function isBoolean(data: unknown): data is boolean;
/**
 * 받은 데이터가 빈값인지 확인하는 함수
 *  > undefined, null, '', [], {}를 빈값으로 판단
 *  > 객체가 문자열 키 속성을 가지고 있지 않으면 빈값으로 판단
 *  > 배열, arguments 객체, buffer, string등은 length가 0이면 빈값으로 판단
 *  > map, sets는 size가 0이면 빈값으로 판단
 *
 *
 * TypeScript의 제한으로 인해 부정형으로는 작동하지 않으니 !isEmpty(data)는 사용하지 말 것
 *
 * @param data - 받은 변수
 * @returns data가 비어있으면 true를, 아니면 false를 반환
 * @signature
 *  isEmpty(data)
 * @example
 * isEmpty(undefined);  // true
 * isEmpty(null);       // true
 * isEmpty('');         // true
 * isEmpty('  ');       // true
 * isEmpty([]);         // true
 * isEmpty({});         // true
 * isEmpty(new Set());  // true
 * isEmpty(new Map());  // true
 * isEmpty(NaN);        // true
 * isEmpty(new Date('Invalid Date')); // true
 *
 * isEmpty('hello');    // false
 * isEmpty([1, 2, 3]);  // false
 * isEmpty({ a: 1 });   // false
 * isEmpty(0);          // false
 * isEmpty(false);      // false
 *
 * @category Guard
 */
export declare function isEmpty(data: unknown): boolean;
/**
 * 받은 데이터가 Error인지 확인하는 함수
 *
 * @param data - 확인할 변수
 * @returns 데이터가 Error인 경우 true, 아니면 false 반환
 * @signature
 *  isError(data)
 * @example
 *  isError(new Error('message')) //=> true
 *
 * isError('') //=> false
 * isError({}) //=> false
 * isError([]) //=> false
 * isError(Promise.resolve('string')) //=> false
 * isError(new Date()) //=> false
 * isError(Object.create(null)) //=> false
 * isError(0) //=> false
 *
 * @category Guard
 */
export declare function isError<T>(data: T): boolean;
/**
 * 주어진 변수가 함수인지 확인하는 함수
 *
 * @param data - 확인할 변수
 * @returns 데이터가 함수이면 true, 아니면 false.
 * @signature
 *  isFunction(data)
 * @example
 *  isFunction(() => {}) //=> true
 *  isFunction(Math.round) // => true
 *  isFunction(function * Any() {}) //=> true
 *  isFunction(class Any{}) // => true
 *
 *  isFunction('string') //=> false
 * isFunction(123) //=> false
 * isFunction({}) //=> false
 * isFunction([]) //=> false
 * isFunction(null) //=> false
 *
 * @category Guard
 */
export declare function isFunction<T>(data: T): boolean;
/**
 * 받은 값이 null 또는 undefined인지 확인하는 함수
 *
 * @param data - 확인할 변수
 * @returns 입력 값이 null 또는 undefined인 경우 true, 그렇지 않으면 false 반환2
 * @signature
 * isNullish(data)
 * @example
 * isNullish(null) //=> true
 * isNullish(undefined) //=> true
 * isNullish('string') //=> false
 * isNullish(0) //=> false
 * ...
 * @category Guard
 */
export declare function isNullish<T>(data: T): boolean;
/**
 * 주어진 데이터가 숫자인지 확인하는 함수
 *
 * @param data - 확인할 데이터
 * @returns 데이터가 숫자이면 true, 아니면 false.
 * @signature
 *  isNumber(data)
 * @example
 *  isNumber(1); // => true
 *  isNumber(2*82163); // => true
 *  isNumber(Infinity); // => true
 *  isNumber(-123); // => true
 *
 *  isNumber('string'); // => false
 *  isNumber(1n); // => false
 * @category Guard
 */
export declare function isNumber(data: unknown): data is number;
/**
 * 주어진 데이터가 숫자 형태를 가진 문자열인지 확인하는 함수
 *
 * @param data - 확인할 데이터
 * @returns 데이터가 숫자 형태를 가진 문자열이면 true, 아니면 false 반환
 * @signature
 *  isNumeric(data)
 * @example
 *  isNumeric(1); // => true
 *  isNumeric(2*82163); // => true
 *  isNumeric(Infinity); // => true
 *  isNumeric(-123); // => true
 *  isNumeric(1n); // => true
 *  isNumeric(10e3); // => true
 *  isNumeric('2e5'); // => true
 *
 *  isNumeric('string'); // => false
 *  isNumeric(' 45'); // => false
 * @category Guard
 */
export declare function isNumeric<T>(data: T): boolean;
/**
* 받은 변수가 문자열인지 확인하는 함수
*
* @param data - 확인할 변수
* @returns data가 문자열인 경우 true, 아니면 false
* @signature
* isString(data)
* @example
* isString('string') //=> true
* isString('') //=> true
*
* isString(1) //=> false
* isString(null) //=> false
* isString(undefined) //=> false
* isString({}) //=> false
* isString([]) //=> false
* isString(new Date()) //=> false
* isString(new Error()) //=> false
* isString(() => {}) //=> false

* @category Guard
*/
export declare function isString(data: unknown): data is string;
/**
 *  첫 번째 인자가 두 번째 인자에 포함되는지 확인하는 함수
 *  이 함수는 ``Array.prototype.includes`` 및 ``Set.prototype.has``를 감싸는 래퍼이므로
 *  해당 함수가 수행하는 것과 동일한 동일성 검사(참조 동일성 : `===`)에 의존합니다.
 *  경우에 따라 입력 유형이 컨테이너의 항목 유형으로 좁혀지기도 합니다.
 *  대부분의 함수와 달리 이 함수는 일반 항목을 데이터로,배열을 매개변수로 받습니다.
 *
 * @param value - 확인할 변수
 * @param parameter - 확인할 배열
 * @returns container안에 data가 있으면 true, 없으면 false 반환
 * @signature
 *  isIncludedIn(data, container);
 * @example
 *  isIncludedIn(2, [1, 2, 3]); // => true
 *  isIncludedIn(4, [1, 2, 3]); // => false
 *  isIncludedIn('1', { a: 1, b: 2 }); // => true
 *  isIncludedIn('3', { a: 1, b: 2 }); // => false
 *  isIncludedIn('1', new Set(['1', '2', '3'])); // => true
 *  isIncludedIn('4', new Set(['1', '2', '3'])); // => false
 *  isIncludedIn('1', new Map([['a', '1'], ['b', '2']])); // => true
 *  isIncludedIn('3', new Map([['a', '1'], ['b', '2']])); // => false
 *
 * @dataFirst
 * @category Guard
 */
export declare function isIncludedIn<T>(value: T, parameter: T | T[] | Set<T> | Map<string, T>): boolean;
export type CreateDurationParameters = [
	units: DurationUnitsObjectType
] | [
	time: number,
	unit?: DurationUnitType
] | [
	ISO_8601: string
];
export declare class HicareDate {
	static timezone: string;
	/** 밀리세컨드 */
	static milliseconds: number;
	/** 초 (단위 밀리세컨드) */
	static seconds: number;
	/** 분 (단위 밀리세컨드) */
	static minutes: number;
	/** 시간 (단위 밀리세컨드) */
	static hours: number;
	/** 일 (단위 밀리세컨드) */
	static days: number;
	/** 주 (단위 밀리세컨드) */
	static weeks: number;
	/** 월 (단위 밀리세컨드) */
	static months: number;
	/** 년 (단위 밀리세컨드) */
	static years: number;
	/**
	 * 현재 시간을 가져옵니다.
	 * @param { dayjs.ConfigType } params
	 * @returns dayjs.Dayjs
	 */
	now(params?: dayjs.ConfigType): dayjs.Dayjs;
	/**
	 * 현재 시간을 타임존을 적용하여 가져옵니다.
	 * @param { dayjs.ConfigType } params
	 */
	nowTz(params?: dayjs.ConfigType): dayjs.Dayjs;
	/**
	 * 현재 시간을 UTC로 가져옵니다.
	 * @param { dayjs.ConfigType } params
	 * @returns dayjs.Dayjs
	 */
	nowUTC(params?: dayjs.ConfigType): dayjs.Dayjs;
	/**
	 * 현재 시간을 타임존을 적용후 UTC를 재 적용하여 가져옵니다.
	 * @param { dayjs.ConfigType } params
	 *  @returns dayjs.Dayjs
	 */
	nowTzUtc(params?: dayjs.ConfigType): dayjs.Dayjs;
	/**
	 * duration 객체를 가져옵니다.
	 * @returns Duration
	 * @param { CreateDurationParameters } args
	 */
	duration(...args: CreateDurationParameters): Duration;
	/**
	 * 타임존을 설정합니다.
	 * @param timezone
	 * @returns boolean
	 * @throws Error 타임존이 잘못된 경우
	 */
	setTimeZone(timezone: string): boolean;
}
export declare const hicareDate: HicareDate;
/**
 *
 * func를 정의된 밀리초 동안 함수 호출을 지연시키는 함수
 * 디바운스된 함수가 호출될 때마다 clearTimeout()을 사용하여 현재 보류 중인 시간 제한을 지우고 setTimeout()을 사용하여 최소 ms 밀리초가 경과할 때까지 함수 호출을 지연시키는 새 시간 제한을 만듭니다.
 *
 *
 * @param func // 호출을 지연시킬 함수
 * @param {object} // delay 지연시킬 밀리초 시간
 * @returns // 새로 디바운스 된 함수 반환
 *  default - call : 함수 호출,
 * cancel : 지연된 함수 호출 취소,
 * flush : 지연된 함수 호출 즉시 실행,
 * isPending : 지연된 함수 호출이 보류 중인지 확인,
 * cachedValue : 최신 반환 값
 * @signature debounce(func,option)
 * @example
 *   const debounce = debounce(identity(), { timing: 'trailing', waitMs: 1000 });
 *   const result1 = debounce.call(1); // => undefined
 *   const result2 = debounce.call(2); // => undefined
 *   // 1초 후
 *   const result3 = debounce.call(3); // => 2
 *   // 1초 후
 *   debounce.cachedValue; // => 3
 *
 */
export declare const debounce: typeof RemedaDebounce;
/**
 *  'limit' 밀리초마다 최대 한 번만 `func`를 호출하는 스로틀링 함수
 *  func는 스로틀링 함수에 제공된 마지막 인수로 호출됩니다.
 *  이후 스로틀된 함수에 대한 호출은 마지막 `func` 호출의 결과를 반환합니다.
 *
 *
 *  @param {Function} func 지정시간마다 한 번만 실행할 함수
 * @param {number} [wait=0] 호출을 제한할 밀리초 단위의 시간
 * @returns {Function} 새로 스로틀링된 함수 반환
 * @example
 * // 스크롤 시 위치를 과도하게 업데이트하지 않도록 합니다.
 * jQuery(window).on('scroll', throttle(updatePosition, 100))
 *
 * // 클릭 이벤트가 발생할 때 renewToken을 호출하지만, 5분에 한 번 이상 호출하지 않습니다.
 * const throttled = throttle(renewToken, 300000, { 'trailing': false })
 * jQuery(element).on('click', throttled)
 */
export declare const throttle: any;
/**
 * 함수를 한 번만 호출하도록 제한하는 함수입니다
 * 이후 호출 시에는 `undefined`를 반환합니다
 *
 *
 *  @param fn - 제한할 함수
 *  @signature once(fn)
 *  @example
 *  const initialize = once(fn);
 *  initialize();
 *  initialize();
 *  // => `fn`는 한 번만 호출됩니다
 *  @category Function
 */
export declare const once: typeof RemedaOnce;
/**
 * `start`와 `end` 사이에 value가 있는지 확인하지만 `end`의 값이 없는경우는 포함하지 않습니다.
 * 'end'가 undefined일 경우, 숫자는 0부터 'start'까지, 날짜는 1970년 1월 1일부터 'start'까지의 범위로 간주합니다.
 * 'start'가 'end'보다 큰 경우 'end'에서 'start'사이의 범위로 변경됩니다.
 *
 * @template T
 * @param {T} value 확인할 변수 (숫자 또는 Date 객체)
 * @param {T} start 시작 변수 (숫자 또는 Date 객체)
 * @param {T} [end] 끝 변수 (숫자 또는 Date 객체, 옵션)
 * @returns {boolean} start <= value < end 이라면 true, 아니면 false 반환
 * @throws {Error} value의 타입과 start, end의 타입이 일치하지 않을 경우 에러를 발생시킵니다.
 *
 * @example
 * // 숫자 사용 예시
 * inRange(3, 2, 4) // => true
 * inRange(4, 8) // => true
 * inRange(1.2, 2) // => true
 * inRange(-3, -2, -6) // => true
 * inRange(4, 2) // => false
 * inRange(2, 2) // => false
 *
 * @example
 * // Date 객체 사용 예시
 * inRange(new Date('2023-01-15'), new Date('2023-01-01'), new Date('2023-01-31')) // => true
 * inRange(new Date('2023-02-01'), new Date('2023-01-01')) // => false
 */
export declare function inRange<T>(value: T, start: number, end?: number): boolean;
export declare function inRange<T>(value: T, start: Date, end?: Date): boolean;
/**
 * 지정된 초 만큼 대기합니다. 소수점을 사용하여 밀리초까지 지정할 수 있습니다.
 * @param {number} seconds
 * @returns {Promise<void>}
 */
export declare function sleep(seconds: number): Promise<unknown>;
/**
 * 크기의 길이만큼 그룹으로 분할된 요소 배열을 생성합니다. 배열을 균등하게 분할할 수 없는 경우 최종 청크는 나머지 요소가 됩니다.
 * @param array
 * @param size
 */
export declare function chunk<T>(array: T[], size: number): T[][];
/**
 * '시작'에서 '끝'까지의 '배열' 조각을 생성합니다(단, '끝'은 포함하지 않음).
 * @param array
 * @param start
 * @param end
 */
export declare function slice<T>(array: T[], start: number, end: number): T[];
/**
 *
 * 받은 값의 깊은복사를 하기 위한 함수
 *
 * @param value - 깊은복사를 할 값
 * @signature cloneDeep(value)
 * @example cloneDeep({foo: 'bar'}) // {foo: 'bar'}
 */
export declare function cloneDeep<T>(value: T): T;
/**
 * array filter를 구현한 함수이며 filter 함수를 통해 조건에 맞는 값을 반환한다.
 * array가 아닌 경우 array를 반환하고 filter가 함수가 아닌 경우 array를 반환한다.
 * array가 비어있는 경우 array를 반환한다.
 * @param array
 * @param filter
 */
export declare function filter<T extends IterableContainer>(array: ReadonlyArray<T>, filter: (item: T, index?: number, list?: T[]) => boolean): T[];
/**
 * array map을 구현한 함수이며 map 함수를 통해 값을 변환한다.
 * array가 아닌 경우 array를 반환하고 map이 함수가 아닌 경우 array를 반환한다.
 * array가 비어있는 경우 array를 반환한다.
 * @param array
 * @param map
 */
export declare function map<T extends IterableContainer, R>(array: ReadonlyArray<T>, map: (item: T, index?: number, list?: ReadonlyArray<T>) => R): Mapped<T, R>;
export declare function reduce<T, U>(data: ReadonlyArray<T>, callbackfn: (previousValue: U, currentValue: T, currentIndex: number, data: ReadonlyArray<T>) => U, initialValue: U): U;
/**
 * array find를 구현한 함수이며 find 함수를 통해 조건에 맞는 값을 반환한다.
 * @param arr
 * @param predicate
 */
export declare function find<T extends IterableContainer>(arr: ReadonlyArray<T>, predicate: (item: T) => boolean): T | undefined;
/**
 * array findIndex를 구현한 함수이며 findIndex 함수를 통해 조건에 맞는 값을 반환한다.
 * @param array
 * @param predicate
 */
export declare function findIndex<T extends IterableContainer>(array: ReadonlyArray<T>, predicate: (item: T) => boolean): number;
export declare function flatMap<T extends IterableContainer, R>(data: ReadonlyArray<T>, callbackfn: (value: T, index: number, data: ReadonlyArray<T>) => ReadonlyArray<R> | R): Array<R>;
declare const DEFAULT_DEPTH = 1;
export declare function flatten<T extends IterableContainer, Depth extends number = typeof DEFAULT_DEPTH>(data: ReadonlyArray<T>, depth?: IsNumericLiteral<Depth> extends true ? Depth : never): Array<T>;
/**
 * 주어진 키 함수 또는 속성 이름을 기반으로 배열의 요소들을 그룹화합니다.
 *
 * @template T 입력 배열의 요소 타입
 * @template K 키 함수가 반환하는 키의 타입 또는 객체의 속성 키 타입
 *
 * @param {T[]} array 그룹화할 입력 배열
 * @param {((item: T) => K) | keyof T} keyFn 배열의 요소를 받아 그룹화 키를 반환하는 함수 또는 객체의 속성 이름
 *
 * @throws {TypeError} 첫 번째 인자가 배열이 아닌 경우 발생
 * @throws {TypeError} 두 번째 인자가 함수도 아니고 문자열도 아닌 경우 발생
 * @throws {TypeError} 키 함수가 문자열, 숫자, 심볼이 아닌 값을 반환할 경우 발생
 *
 * @returns {Record<K & GroupByKey, T[]>} 키 함수의 결과 또는 속성 값을 키로 하고, 해당 키를 생성한 요소들의 배열을 값으로 하는 객체
 *
 * @example
 * const 사람들 = [
 *   { 이름: "Alice", 나이: 25 },
 *   { 이름: "Bob", 나이: 30 },
 *   { 이름: "Charlie", 나이: 25 },
 *   { 이름: "David", 나이: 30 }
 * ];
 * const 나이별그룹 = groupBy(사람들, '나이');
 * // 또는
 * const 나이별그룹 = groupBy(사람들, 사람 => 사람.나이);
 * // 결과:
 * // {
 * //   "25": [{ 이름: "Alice", 나이: 25 }, { 이름: "Charlie", 나이: 25 }],
 * //   "30": [{ 이름: "Bob", 나이: 30 }, { 이름: "David", 나이: 30 }]
 * // }
 */
export declare function groupBy<T, K extends keyof T | GroupByKey>(array: T[], keyFn: ((item: T) => K) | keyof T): Record<K & GroupByKey, T[]>;
export declare function listToTree(list: CodeItem[]): TreeNode[];
export type IterateeFunction<T> = (value: T) => any;
export type IterateeShorthand<T> = keyof T;
export type Order = "asc" | "desc";
export declare function orderBy<T extends object>(collection: readonly T[], iteratees: ReadonlyArray<IterateeFunction<T> | IterateeShorthand<T>>, orders?: ReadonlyArray<Order>): T[];
/**
 * 주어진 템플릿 문자열의 플레이스홀더를 인자로 대체합니다.
 *
 * @param {string} template - 플레이스홀더 '{:}'를 포함한 템플릿 문자열
 * @param {...(string|number|boolean|null|undefined)} args - 플레이스홀더를 대체할 값들
 * @returns {string} 플레이스홀더가 대체된 결과 문자열
 * @throws {Error} 인자의 수가 플레이스홀더의 수보다 적을 경우 에러를 발생시킵니다.
 *
 * @example
 * // 기본 사용법
 * format("Hello, {:}!", "world") // 반환값: "Hello, world!"
 *
 * @example
 * // 여러 플레이스홀더 사용
 * format("Name: {:}, Age: {:}", "John", 30) // 반환값: "Name: John, Age: 30"
 *
 * @example
 * // 이스케이프 처리
 * format("This is a \\{:} placeholder") // 반환값: "This is a {:} placeholder"
 *
 * @example
 * // 다양한 타입 사용
 * format("Boolean: {:}, Null: {:}, Undefined: {:}", true, null, undefined)
 * // 반환값: "Boolean: true, Null: , Undefined: "
 */
export declare function format(template: string, ...args: FormatArgs): string;
export interface Options {
	locale?: string | string[];
	sentenceCase?: boolean;
	sentenceTerminators?: Set<string>;
	smallWords?: Set<string>;
	titleTerminators?: Set<string>;
	wordSeparators?: Set<string>;
}
declare function titleCase(input: string, options?: Options | string[] | string): string;
/**
 * Supported locale values. Use `false` to ignore locale.
 * Defaults to `undefined`, which uses the host environment.
 */
export type Locale = string[] | string | false | undefined;
/**
 * Options used for converting strings to pascal/camel case.
 */
export interface PascalCaseOptions extends ChangeCaseOptions {
	mergeAmbiguousCharacters?: boolean;
}
/**
 * Options used for converting strings to any case.
 */
export interface ChangeCaseOptions {
	locale?: Locale;
	split?: (value: string) => string[];
	/** @deprecated Pass `split: splitSeparateNumbers` instead. */
	separateNumbers?: boolean;
	delimiter?: string;
	prefixCharacters?: string;
	suffixCharacters?: string;
}
declare function noCase(input: string, options?: ChangeCaseOptions): string;
declare function camelCase(input: string, options?: PascalCaseOptions): string;
declare function pascalCase(input: string, options?: PascalCaseOptions): string;
declare function pascalSnakeCase(input: string, options?: ChangeCaseOptions): string;
declare function capitalCase(input: string, options?: ChangeCaseOptions): string;
declare function constantCase(input: string, options?: ChangeCaseOptions): string;
declare function dotCase(input: string, options?: ChangeCaseOptions): string;
declare function kebabCase(input: string, options?: ChangeCaseOptions): string;
declare function pathCase(input: string, options?: ChangeCaseOptions): string;
declare function sentenceCase(input: string, options?: ChangeCaseOptions): string;
declare function snakeCase(input: string, options?: ChangeCaseOptions): string;
declare function trainCase(input: string, options?: ChangeCaseOptions): string;
/**
 * 주어진 이름 정보를 바탕으로 전체 이름을 형식화하여 반환합니다.
 * 이름은 "성, 이름 중간이름" 형식으로 반환되며, 중간이름은 선택적입니다.
 * lastName 또는 firstName이 없는 경우 해당 부분은 빈 문자열로 처리됩니다.
 *
 * @param {string | PersonName} nameOrLastName - 성(lastName) 또는 전체 이름 정보를 담은 객체
 * @param {string} [firstName] - 이름 (nameOrLastName이 객체가 아닐 경우)
 * @param {string} [middleName] - 중간 이름 (선택적)
 *
 * @returns {string} 형식화된 전체 이름
 *
 * @example
 * // 개별 문자열로 사용
 * getPersonFullName('Doe', 'John'); // 반환값: "Doe, John"
 * getPersonFullName('Doe', 'John', 'Michael'); // 반환값: "Doe, John Michael"
 * getPersonFullName('', 'John'); // 반환값: ", John"
 * getPersonFullName('Doe'); // 반환값: "Doe, "
 *
 * @example
 * // 객체로 사용
 * getPersonFullName({ lastName: 'Doe', firstName: 'Jane' }); // 반환값: "Doe, Jane"
 * getPersonFullName({ lastName: 'Doe', firstName: 'Jane', middleName: 'Elizabeth' }); // 반환값: "Doe, Jane Elizabeth"
 * getPersonFullName({ firstName: 'Jane' }); // 반환값: ", Jane"
 * getPersonFullName({}); // 반환값: ", "
 */
export declare function getPersonFullName(nameOrLastName: string | PersonName, firstName?: string, middleName?: string): string;
export declare const stringCase: {
	camelCase: typeof camelCase;
	capitalCase: typeof capitalCase;
	constantCase: typeof constantCase;
	dotCase: typeof dotCase;
	kebabCase: typeof kebabCase;
	noCase: typeof noCase;
	pascalCase: typeof pascalCase;
	pascalSnakeCase: typeof pascalSnakeCase;
	pathCase: typeof pathCase;
	sentenceCase: typeof sentenceCase;
	snakeCase: typeof snakeCase;
	titleCase: typeof titleCase;
	trainCase: typeof trainCase;
};

export {
	isObjectType,
	sleep as delay,
};

export {};
